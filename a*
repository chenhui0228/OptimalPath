import mathimport randomimport timeimport heapqclass Cell(object):    def __init__(self, x, y, reachable):        """        Initialize new cell
        @param x cell x coordinate        @param y cell y coordinate        @param reachable is cell reachable? not a wall?        """        self.reachable = reachable        self.x = x        self.y = y        self.parent = None        self.g = 0        self.h = 0        self.f = 0
class AStar(object):    def __init__(self):        self.opened = []        heapq.heapify(self.opened)        self.closed = set()        self.cells = []        self.grid_height = 12        self.grid_width = 12
    def init_grid( self ,wall,start,end):        walls = wall        #walls =[[0,1]]        for x in range(self.grid_width):            for y in range(self.grid_height):                if (x, y) in walls:                    reachable = False                else:                    reachable = True                self.cells.append(Cell(x, y, reachable))        x=start[0]        y=start[1]        self.start = self.get_cell(x,y)        x=end[0]        y=end[1]        self.end = self.get_cell(x,y)
    def get_heuristic( self, cell ):        """        Compute the heuristic value H for a cell: distance between        this cell and the ending cell multiply by 10.
        @param cell        @returns heuristic value H        """        return 10 * (abs(cell.x - self.end.x) + abs(cell.y - self.end.y))
    def get_adjacent_cells( self, cell ):        """        Returns adjacent cells to a cell. Clockwise starting        from the one on the right.
        @param cell get adjacent cells for this cell        @returns adjacent cells list        """        cells = []        if cell.x < self.grid_width - 1:            cells.append(self.get_cell(cell.x + 1, cell.y))        if cell.y > 0:            cells.append(self.get_cell(cell.x, cell.y - 1))        if cell.x > 0:            cells.append(self.get_cell(cell.x - 1, cell.y))        if cell.y < self.grid_height - 1:            cells.append(self.get_cell(cell.x, cell.y + 1))        return cells
    def get_cell( self, x, y ):        """        Returns a cell from the cells list
        @param x cell x coordinate        @param y cell y coordinate        @returns cell        """        return self.cells[x * self.grid_height + y]
    def display_path( self ):        cell = self.end        n=0        while cell.parent is not self.start:            cell = cell.parent            n+=1        return n
    def update_cell( self, adj, cell ):        """        Update adjacent cell
        @param adj adjacent cell to current cell        @param cell current cell being processed        """        adj.g = cell.g + 10        adj.h = self.get_heuristic(adj)        adj.parent = cell        adj.f = adj.h + adj.g
    def process( self ):        # add starting cell to open heap queue        heapq.heappush(self.opened, (self.start.f, self.start))        mindistance=0        while len(self.opened):            # pop cell from heap queue            f, cell = heapq.heappop(self.opened)            # add cell to closed list so we don't process it twice            self.closed.add(cell)            # if ending cell, display found path            if cell is self.end:                mindistance=self.display_path()                break            # get adjacent cells for cell            adj_cells = self.get_adjacent_cells(cell)            for adj_cell in adj_cells:                if adj_cell.reachable and adj_cell not in self.closed:                    if (adj_cell.f, adj_cell) in self.opened:                        # if adj cell in open list, check if current path is                        # better than the one previously found for this adj                        # cell.                        if adj_cell.g > cell.g + 10:                            self.update_cell(adj_cell, cell)                    else:                        self.update_cell(adj_cell, cell)                        # add adj cell to open list                        heapq.heappush(self.opened, (adj_cell.f, adj_cell))        return mindistancet_start=float(time.time())distance=[([-1] * 144) for i in range(144)]
wall=((0,2),(0,11),(1,0),(1,3),(1,8),(1,11),(2,2),(2,3),(2,4),(2,10),(3,1),(3,3),(3,6),(3,9),(4,2),(4,6),(4,10),(5,2),(5,6),(5,8),(6,6),(7,0),(8,5),(8,6),(8,7),(8,8),(9,1),(9,3),(10,2),(10,4),(11,1),(11,3),(11,10))w=0for i in range(100):    for n in range(100):        if i==n:            distance[i][n]=0            distance[n][i] = 0            continue        if distance[i][n] ==-1 :            start=(int(i/12),i%12)            end=(int(n/12),n%12)            if start in wall or end in wall:                continue            p = AStar()            p.init_grid(wall,start,end)            mindistence=p.process()            distance[i][n]=mindistence            distance[n][i] = mindistence            w+=1t_end=float(time.time())print t_end-t_startprint wprint distance
